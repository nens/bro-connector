# Generated by Django 4.0.3 on 2023-11-24 10:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='gld_addition_log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.CharField(blank=True, max_length=254, null=True)),
                ('observation_id', models.CharField(blank=True, max_length=254, null=True)),
                ('start', models.CharField(blank=True, max_length=254, null=True)),
                ('end', models.CharField(blank=True, max_length=254, null=True)),
                ('broid_registration', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_uuid', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_initialized', models.CharField(blank=True, max_length=254, null=True)),
                ('validation_status', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_id', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_status', models.CharField(blank=True, max_length=254, null=True)),
                ('comments', models.CharField(blank=True, max_length=50000, null=True)),
                ('file', models.CharField(blank=True, max_length=254, null=True)),
                ('addition_type', models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'GLD Toevoeging Log',
                'verbose_name_plural': 'GLD Toevoeging Logs',
                'db_table': 'aanlevering"."gld_addition_log',
            },
        ),
        migrations.CreateModel(
            name='gld_registration_log',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_modified', models.CharField(blank=True, max_length=254, null=True)),
                ('gwm_bro_id', models.CharField(blank=True, max_length=254, null=True)),
                ('filter_id', models.CharField(blank=True, max_length=254, null=True)),
                ('validation_status', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_id', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_status', models.CharField(blank=True, max_length=254, null=True)),
                ('gld_bro_id', models.CharField(blank=True, max_length=254, null=True)),
                ('comments', models.CharField(blank=True, max_length=10000, null=True)),
                ('last_changed', models.CharField(blank=True, max_length=254, null=True)),
                ('corrections_applied', models.BooleanField(blank=True, null=True)),
                ('timestamp_end_registration', models.DateTimeField(blank=True, null=True)),
                ('quality_regime', models.CharField(blank=True, max_length=254, null=True)),
                ('file', models.CharField(blank=True, max_length=254, null=True)),
                ('process_status', models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'GLD Registratie Log',
                'verbose_name_plural': 'GLD Registratie logs',
                'db_table': 'aanlevering"."gld_registration_log',
            },
        ),
        migrations.CreateModel(
            name='GroundwaterLevelDossier',
            fields=[
                ('groundwater_level_dossier_id', models.AutoField(primary_key=True, serialize=False)),
                ('groundwater_monitoring_tube_id', models.IntegerField(blank=True, null=True)),
                ('gmw_bro_id', models.CharField(blank=True, max_length=255, null=True)),
                ('gld_bro_id', models.CharField(blank=True, max_length=255, null=True)),
                ('research_start_date', models.DateField(blank=True, null=True)),
                ('research_last_date', models.DateField(blank=True, null=True)),
                ('research_last_correction', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Grondwaterstand dossier',
                'verbose_name_plural': 'Grondwaterstand dossiers',
                'db_table': 'gld"."groundwater_level_dossier',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementPointMetadata',
            fields=[
                ('measurement_point_metadata_id', models.AutoField(primary_key=True, serialize=False)),
                ('qualifier_by_quantity', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
            ],
            options={
                'verbose_name': 'Meetpunt Metadata',
                'verbose_name_plural': 'Meetpunt Metadata',
                'db_table': 'gld"."measurement_point_metadata',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResponsibleParty',
            fields=[
                ('responsible_party_id', models.AutoField(primary_key=True, serialize=False)),
                ('identification', models.IntegerField(blank=True, null=True)),
                ('organisation_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Verantwoordelijke Partij',
                'verbose_name_plural': 'Verantwoordelijke Partij',
                'db_table': 'gld"."responsible_party',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeAirPressureCompensation',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Luchtdruk Compensatie',
                'db_table': 'gld"."type_air_pressure_compensation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeCensoredReasonCode',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Sensor Redenen',
                'db_table': 'gld"."type_censored_reason_code',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeEvaluationProcedure',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Evaluatie Procedures',
                'db_table': 'gld"."type_evaluation_procedure',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeInterpolationCode',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Interpolatie Codes',
                'db_table': 'gld"."type_interpolation_code',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeMeasurementInstrumentType',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Meetinstrument Types',
                'db_table': 'gld"."type_measurement_instrument_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeObservationType',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Observatie Types',
                'db_table': 'gld"."type_observation_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeProcessReference',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Process Referenties',
                'db_table': 'gld"."type_process_reference',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeProcessType',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Proces Types',
                'db_table': 'gld"."type_process_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeStatusCode',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Status codes',
                'db_table': 'gld"."type_status_code',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeStatusQualityControl',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Kwaliteitscontrole Types',
                'db_table': 'gld"."type_status_quality_control',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ObservationProcess',
            fields=[
                ('observation_process_id', models.AutoField(primary_key=True, serialize=False)),
                ('parameter_air_pressure_compensation_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typeairpressurecompensation')),
                ('parameter_evaluation_procedure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typeevaluationprocedure')),
                ('parameter_measurement_instrument_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typemeasurementinstrumenttype')),
                ('process_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typeprocessreference')),
                ('process_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typeprocesstype')),
            ],
            options={
                'verbose_name': 'Observatie Process',
                'verbose_name_plural': 'Observatie Process',
                'db_table': 'gld"."observation_process',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ObservationMetadata',
            fields=[
                ('observation_metadata_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_stamp', models.DateField(blank=True, null=True)),
                ('parameter_measurement_serie_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typeobservationtype')),
                ('responsible_party', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.responsibleparty')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typestatuscode')),
            ],
            options={
                'verbose_name': 'Observatie Metadata',
                'verbose_name_plural': 'Observatie Metadata',
                'db_table': 'gld"."observation_metadata',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('observation_id', models.AutoField(primary_key=True, serialize=False)),
                ('observationperiod', models.DurationField(blank=True, null=True)),
                ('observation_starttime', models.DateTimeField(blank=True, null=True)),
                ('result_time', models.DateTimeField(blank=True, null=True)),
                ('observation_endtime', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('groundwater_level_dossier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.groundwaterleveldossier')),
                ('observation_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.observationmetadata')),
                ('observation_process', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.observationprocess')),
            ],
            options={
                'verbose_name': 'Observatie',
                'verbose_name_plural': 'Observaties',
                'db_table': 'gld"."observation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementTvp',
            fields=[
                ('measurement_tvp_id', models.AutoField(primary_key=True, serialize=False)),
                ('measurement_time', models.DateTimeField(blank=True, null=True)),
                ('field_value', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
                ('field_value_unit', models.CharField(blank=True, max_length=255, null=True)),
                ('calculated_value', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
                ('corrected_value', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
                ('correction_time', models.DateTimeField(blank=True, null=True)),
                ('correction_reason', models.CharField(blank=True, max_length=255, null=True)),
                ('measurement_point_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.measurementpointmetadata')),
                ('observation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.observation')),
            ],
            options={
                'verbose_name': 'Metingen Tijd-Waarde paren',
                'verbose_name_plural': 'Metingen Tijd-Waarde paren',
                'db_table': 'gld"."measurement_tvp',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='measurementpointmetadata',
            name='censored_reason',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typecensoredreasoncode'),
        ),
        migrations.AddField(
            model_name='measurementpointmetadata',
            name='interpolation_code',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typeinterpolationcode'),
        ),
        migrations.AddField(
            model_name='measurementpointmetadata',
            name='qualifier_by_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gld.typestatusqualitycontrol'),
        ),
    ]
