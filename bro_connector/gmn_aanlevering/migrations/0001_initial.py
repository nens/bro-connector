# Generated by Django 4.0.3 on 2023-10-10 10:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GroundwaterMonitoringNet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('broid_gmn', models.CharField(blank=True, editable=False, max_length=255, null=True, verbose_name='Broid GMN')),
                ('delivery_accountable_party', models.CharField(blank=True, max_length=255, null=True)),
                ('delivery_responsible_party', models.CharField(blank=True, max_length=255, null=True)),
                ('quality_regime', models.CharField(blank=True, max_length=255, null=True)),
                ('object_id_accountable_party', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Naam')),
                ('delivery_context', models.CharField(choices=[('waterwetStrategischGrondwaterbeheer', 'waterwetStrategischGrondwaterbeheer'), ('waterwetGrondwaterzorgplicht', 'waterwetGrondwaterzorgplicht'), ('waterwetOnttrekkingInfiltratie', 'waterwetOnttrekkingInfiltratie'), ('waterwetPeilbeheer', 'waterwetPeilbeheer'), ('waterwetWaterstaatswerkAanlegWijziging', 'waterwetWaterstaatswerkAanlegWijziging'), ('waterwetWaterstaatswerkIngreep', 'waterwetWaterstaatswerkIngreep'), ('waterwetWaterstaatswerkBeheer', 'waterwetWaterstaatswerkBeheer'), ('kaderrichtlijnWater', 'kaderrichtlijnWater'), ('waterschapswet', 'waterschapswet'), ('drinkwaterwet', 'drinkwaterwet'), ('ontgrondingenwet', 'ontgrondingenwet'), ('wetNatuurbescherming', 'wetNatuurbescherming')], max_length=235, verbose_name='Kader aanlevering')),
                ('monitoring_purpose', models.CharField(choices=[('strategischBeheerKwaliteitLandelijk', 'strategischBeheerKwaliteitLandelijk'), ('strategischBeheerKwantiteitLandelijk', 'strategischBeheerKwantiteitLandelijk'), ('strategischBeheerKwaliteitRegionaal', 'strategischBeheerKwaliteitRegionaal'), ('strategischBeheerKwantiteitRegionaal', 'strategischBeheerKwantiteitRegionaal'), ('beheersingStedelijkGebied', 'beheersingStedelijkGebied'), ('gevolgenOnttrekkingKwaliteit', 'gevolgenOnttrekkingKwaliteit'), ('gevolgenOnttrekkingKwantiteit', 'gevolgenOnttrekkingKwantiteit'), ('gevolgenPeilbeheer', 'gevolgenPeilbeheer'), ('gevolgenWaterstaatswerkKwaliteit', 'gevolgenWaterstaatswerkKwaliteit'), ('gevolgenWaterstaatswerkKwantiteit', 'gevolgenWaterstaatswerkKwantiteit'), ('waterstaatswerkBeheerKwaliteit', 'waterstaatswerkBeheerKwaliteit'), ('waterstaatswerkBeheerKwantiteit', 'waterstaatswerkBeheerKwantiteit'), ('veiligstellingGrondwaterKwaliteit', 'veiligstellingGrondwaterKwaliteit'), ('veiligstellingGrondwaterKwantiteit', 'veiligstellingGrondwaterKwantiteit'), ('waterstaatkundigeVerzorgingKwaliteit', 'waterstaatkundigeVerzorgingKwaliteit'), ('waterstaatkundigeVerzorgingKwantiteit', 'waterstaatkundigeVerzorgingKwantiteit'), ('veiligstellingDrinkwatervoorzieningKwaliteit', 'veiligstellingDrinkwatervoorzieningKwaliteit'), ('veiligstellingDrinkwatervoorzieningKwantiteit', 'veiligstellingDrinkwatervoorzieningKwantiteit'), ('gevolgenOntgronding', 'gevolgenOntgronding'), ('natuurbescherming', 'natuurbescherming'), ('natuurbeheer', 'natuurbeheer')], max_length=235, verbose_name='Monitoringdoel')),
                ('groundwater_aspect', models.CharField(blank=True, choices=[('kwaliteit', 'kwaliteit'), ('kwantiteit', 'kwantiteit')], max_length=235, verbose_name='Grondwateraspect')),
                ('start_date_monitoring', models.DateField(blank=True, null=True)),
                ('end_date_monitoring', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'BRO meetnet',
                'verbose_name_plural': 'BRO meetnetten (2.1)',
                'db_table': 'gmn"."groundwater_monitoring_net',
                'ordering': ('name',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasuringPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, editable=False, max_length=255, null=True, verbose_name='Broid GMN')),
                ('gmn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gmn_aanlevering.groundwatermonitoringnet')),
            ],
            options={
                'verbose_name': 'BRO Meetpunt',
                'verbose_name_plural': 'BRO Meetpunt (3.1)',
                'db_table': 'gmn"."measuring_point',
                'ordering': ('code',),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IntermediateEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('event_name', models.TextField(blank=True, null=True)),
                ('event_date', models.DateTimeField(blank=True, null=True)),
                ('gmn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gmn_aanlevering.groundwatermonitoringnet')),
            ],
            options={
                'verbose_name': 'Meetnet Tussentijdse Gebeurtenis',
                'db_table': 'gmn"."intermediate_event',
                'ordering': ('event_date',),
                'managed': True,
            },
        ),
    ]
