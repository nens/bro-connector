"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

import django.db.models.options as options

options.DEFAULT_NAMES = options.DEFAULT_NAMES + ("schema",)

from main.localsecret import *

ENVIRONMENT = "staging"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-1b2-79o0!+@%9d6gt@7k5-8=8(r@&x-(15!o7+zo-zgwg4)gbv"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "main",
    "gld_aanlevering",
    "gmw_aanlevering",
    "gmn_aanlevering",
    "admin_reorder",
    "django_extensions",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "django_admin_generator",
]

MAP_WIDGETS = {
    "GooglePointFieldWidget": (
        ("zoom", 15),
        #("mapCenterLocationName", "london"),
        ("GooglePlaceAutocompleteOptions", {'componentRestrictions': {'country': 'netherlands'}}),
        ("markerFitZoom", 12),
    ),
    "GOOGLE_MAP_API_KEY": "<google-api-key>"
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "admin_reorder.middleware.ModelAdminReorder",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "main.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASE_ROUTERS = ['database_routers.zeeland_gld.PostgresRouter']

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "grondwatermeetnet",
        "USER": p_user,
        "PASSWORD": p_password,
        "HOST": p_host,
        "PORT": p_port,
        "OPTIONS": {"options": "-c search_path=django_admin"},
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


ADMIN_REORDER = (
    # First group
    {
        "app": "gld_aanlevering",
        "label": "Registratie aanlevering",  # GLD Registratie
        "models": (
            "gld_aanlevering.gld_registration_log",
            "gld_aanlevering.gld_addition_log",
        ),
    },
    # Second group: same app, but different label
    {
        "app": "gld_aanlevering",
        "label": "Grondwaterstandsonderzoek data",  # Provincie Zeeland GLD - Data
        "models": (
            "gld_aanlevering.Observation",
            "gld_aanlevering.GroundwaterLevelDossier",
            "gld_aanlevering.MeasurementPointMetadata",
            "gld_aanlevering.MeasurementTvp",
            "gld_aanlevering.ObservationMetadata",
            "gld_aanlevering.ObservationProcess",
            "gld_aanlevering.ResponsibleParty",
        ),
    },
    {
        "app": "gld_aanlevering",
        "label": "Grondwaterstandsonderzoek typeringen",  # Provincie Zeeland GLD - Types
        "models": (
            "gld_aanlevering.TypeAirPressureCompensation",
            "gld_aanlevering.TypeCensoredReasonCode",
            "gld_aanlevering.TypeEvaluationProcedure",
            "gld_aanlevering.TypeInterpolationCode",
            "gld_aanlevering.TypeMeasurementInstrumentType",
            "gld_aanlevering.TypeObservationType",
            "gld_aanlevering.TypeProcessReference",
            "gld_aanlevering.TypeProcessType",
            "gld_aanlevering.TypeStatusCode",
            "gld_aanlevering.TypeStatusQualityControl",
        ),
    },
    {
        "app": "gmn_aanlevering",
        "label": "Grondwatermonitoringsnet (GMN) data", 
        "models": (
            "gmn_aanlevering.GroundwaterMonitoringNet",
            "gmn_aanlevering.MeasuringPoint",
            "gmn_aanlevering.IntermediateEvent",
            "gmn_aanlevering.gmn_bro_sync_log"
        ),
    },
    {
        "app": "gmw_aanlevering",
        "label": "Grondwatermonitoring data",  # Provincie Zeeland GWM - Data
        "models": (
            "gmw_aanlevering.GroundwaterMonitoringWellStatic",
            "gmw_aanlevering.GroundwaterMonitoringWellDynamic",
            "gmw_aanlevering.GroundwaterMonitoringTubesStatic",
            "gmw_aanlevering.GroundwaterMonitoringTubesDynamic",
            "gmw_aanlevering.GeoOhmCable",
            "gmw_aanlevering.ElectrodeStatic",
            "gmw_aanlevering.ElectrodeDynamic",
            "gmw_aanlevering.Event",

        ),
    },
)

if ENVIRONMENT == "production":
    demo = False
    welcome_sign = 'Inloggen'
else:
    demo = True
    welcome_sign = 'Inloggen (testomgeving)'

# # BROCONVERTER SETTINGS
GLD_AANLEVERING_SETTINGS = {
    "acces_token_bro_portal_demo": {
        "user": bro_demo_user,
        "pass": bro_demo_password,
    },
    "acces_token_bro_portal_bro_connector": {
        "user": bro_production_user,
        "pass": bro_production_password,
    },
    "monitoringnetworks": None,
    "demo": demo,
    "additions_dir": os.path.join(BASE_DIR, "gld_aanlevering/additions"),
    "startregistrations_dir": os.path.join(
        BASE_DIR, "gld_aanlevering/startregistrations"
    ),
}

GMW_AANLEVERING_SETTINGS = {
    "acces_token_bro_portal_demo": {
        "user": bro_demo_user,
        "pass": bro_demo_password,
    },
    "acces_token_bro_portal_bro_connector": {
        "user": bro_production_user,
        "pass": bro_production_password,
    },
    "monitoringnetworks": None,
    "demo": demo,
    "additions_dir": os.path.join(BASE_DIR, "gmw_aanlevering/additions"),
    "registrations_dir": os.path.join(
        BASE_DIR, "gmw_aanlevering/registrations"
    ),
}

GMN_AANLEVERING_SETTINGS = {
    "acces_token_bro_portal_demo": {
        "user": bro_demo_user,
        "pass": bro_demo_password,
    },
    "acces_token_bro_portal_bro_connector": {
        "user": bro_production_user,
        "pass": bro_production_password,
    },
    "monitoringnetworks": None,
    "demo": demo,
    "additions_dir": os.path.join(BASE_DIR, "gmn_aanlevering/additions"),
    "registrations_dir": os.path.join(
        BASE_DIR, "gmn_aanlevering\\registrations"
    ),
}

# Quick Scan SETTINGS
QUICK_SCAN_SETTINGS = {
    "jump_slope_limit": 1 / (60 * 60),  # m/s (1/3600 m/s = 1 m/h)
    # 'max_change_two_measurements':1,
    # 'liveliness_maximum_flatline_duration':100
}

JAZZMIN_SETTINGS = {
    "site_logo": os.path.join(BASE_DIR, "static/img/broconnector.png"),
    "welcome_sign": welcome_sign,
    "order_with_respect_to": [
        "auth",
        "gld_aanlevering.gld_registration_log",
        "gld_aanlevering.gld_addition_log",
        "gld_aanlevering.GroundwaterLevelDossier",
        "gld_aanlevering.Observation",
        "gld_aanlevering.ObservationMetadata",
        "gld_aanlevering.MeasurementTvp",
        "gld_aanlevering.MeasurementPointMetadata",
    ],
    # "hide_models":["gld_aanlevering.TypeAirPressureCompensation",'gld_aanlevering.TypeCensoredReasonCode',
    # 'gld_aanlevering.TypeEvaluationProcedure',
    # 'gld_aanlevering.TypeInterpolationCode',
    # 'gld_aanlevering.TypeMeasurementInstrumentType',
    # 'gld_aanlevering.TypeObservationType',
    # 'gld_aanlevering.TypeProcessReference',
    # 'gld_aanlevering.TypeProcessType',
    # 'gld_aanlevering.TypeStatusCode',
    # 'gld_aanlevering.TypeStatusQualityControl'],
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "gld_aanlevering.gld_registration_log": "fas fa-solid fa-download",
        "gld_aanlevering.gld_addition_log": "fas fa-solid fa-play",
        "gld_aanlevering.Observation": "fas fa-search",
        "gld_aanlevering.GroundwaterLevelDossier": "fas fa-solid fa-folder",
        "gld_aanlevering.MeasurementPointMetadata": "fas fa-solid fa-list-ul",
        "gld_aanlevering.MeasurementTvp": "fas fa-times",
        "gld_aanlevering.ObservationMetadata": "fas fa-solid fa-list-ul",
        # 'gld_aanlevering.ObservationProcess': "",
        "gld_aanlevering.ResponsibleParty": "fas fa-solid fa-building",
        "gld_aanlevering.TypeAirPressureCompensation": "fas fa-book-open",
        "gld_aanlevering.TypeCensoredReasonCode": "fas fa-book-open",
        "gld_aanlevering.TypeEvaluationProcedure": "fas fa-book-open",
        "gld_aanlevering.TypeInterpolationCode": "fas fa-book-open",
        "gld_aanlevering.TypeMeasurementInstrumentType": "fas fa-book-open",
        "gld_aanlevering.TypeObservationType": "fas fa-book-open",
        "gld_aanlevering.TypeProcessReference": "fas fa-book-open",
        "gld_aanlevering.TypeProcessType": "fas fa-book-open",
        "gld_aanlevering.TypeStatusCode": "fas fa-book-open",
        "gld_aanlevering.TypeStatusQualityControl": "fas fa-book-open",
        "gmw_aanlevering.GroundwaterMonitoringWellStatic": "fas fa-tint",
        "gmw_aanlevering.GroundwaterMonitoringWellDynamic": "fas fa-tint",
        "gmw_aanlevering.GroundwaterMonitoringTubesStatic": "fas fa-tint",
        "gmw_aanlevering.GroundwaterMonitoringTubesDynamic": "fas fa-tint",
        "gmw_aanlevering.GeoOhmCable": "fas fa-tint",
        "gmw_aanlevering.ElectrodeStatic": "fas fa-tint",
        "gmw_aanlevering.ElectrodeDynamic": "fas fa-tint",
        "gmw_aanlevering.Event": "fas fa-book-open",
        # "gmw_aanlevering.GroundwaterMonitoringTubes": "fas fa-prescription-bottle",
    },
    "changeform_format_overrides": {"gmw_aanlevering.GroundwaterMonitoringWellStatic": "single"}
}


GRAPH_MODELS = {
    "all_applications": True,
    "group_models": True,
}

GDAL_LIBRARY_PATH = r"C:\OSGeo4W\bin\gdal307.dll"
GEOS_LIBRARY_PATH = r"C:\OSGeo4W\bin\geos_c.dll"