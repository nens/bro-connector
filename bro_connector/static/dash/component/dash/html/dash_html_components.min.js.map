{"version":3,"file":"dash_html_components.min.js","mappings":"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","sources":["webpack://dash_html_components/webpack/bootstrap","webpack://dash_html_components/webpack/runtime/compat get default export","webpack://dash_html_components/webpack/runtime/define property getters","webpack://dash_html_components/webpack/runtime/hasOwnProperty shorthand","webpack://dash_html_components/webpack/runtime/make namespace object","webpack://dash_html_components/external window \"React\"","webpack://dash_html_components/external window \"PropTypes\"","webpack://dash_html_components/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://dash_html_components/./node_modules/ramda/es/internal/_curry1.js","webpack://dash_html_components/./node_modules/ramda/es/internal/_curry2.js","webpack://dash_html_components/./node_modules/ramda/es/omit.js","webpack://dash_html_components/./src/components/A.react.js","webpack://dash_html_components/./src/components/Abbr.react.js","webpack://dash_html_components/./src/components/Acronym.react.js","webpack://dash_html_components/./src/components/Address.react.js","webpack://dash_html_components/./src/components/Area.react.js","webpack://dash_html_components/./src/components/Article.react.js","webpack://dash_html_components/./src/components/Aside.react.js","webpack://dash_html_components/./src/components/Audio.react.js","webpack://dash_html_components/./src/components/B.react.js","webpack://dash_html_components/./src/components/Base.react.js","webpack://dash_html_components/./src/components/Basefont.react.js","webpack://dash_html_components/./src/components/Bdi.react.js","webpack://dash_html_components/./src/components/Bdo.react.js","webpack://dash_html_components/./src/components/Big.react.js","webpack://dash_html_components/./src/components/Blink.react.js","webpack://dash_html_components/./src/components/Blockquote.react.js","webpack://dash_html_components/./src/components/Br.react.js","webpack://dash_html_components/./src/components/Button.react.js","webpack://dash_html_components/./src/components/Canvas.react.js","webpack://dash_html_components/./src/components/Caption.react.js","webpack://dash_html_components/./src/components/Center.react.js","webpack://dash_html_components/./src/components/Cite.react.js","webpack://dash_html_components/./src/components/Code.react.js","webpack://dash_html_components/./src/components/Col.react.js","webpack://dash_html_components/./src/components/Colgroup.react.js","webpack://dash_html_components/./src/components/Content.react.js","webpack://dash_html_components/./src/components/Data.react.js","webpack://dash_html_components/./src/components/Datalist.react.js","webpack://dash_html_components/./src/components/Dd.react.js","webpack://dash_html_components/./src/components/Del.react.js","webpack://dash_html_components/./src/components/Details.react.js","webpack://dash_html_components/./src/components/Dfn.react.js","webpack://dash_html_components/./src/components/Dialog.react.js","webpack://dash_html_components/./src/components/Div.react.js","webpack://dash_html_components/./src/components/Dl.react.js","webpack://dash_html_components/./src/components/Dt.react.js","webpack://dash_html_components/./src/components/Em.react.js","webpack://dash_html_components/./src/components/Embed.react.js","webpack://dash_html_components/./src/components/Fieldset.react.js","webpack://dash_html_components/./src/components/Figcaption.react.js","webpack://dash_html_components/./src/components/Figure.react.js","webpack://dash_html_components/./src/components/Font.react.js","webpack://dash_html_components/./src/components/Footer.react.js","webpack://dash_html_components/./src/components/Form.react.js","webpack://dash_html_components/./src/components/Frame.react.js","webpack://dash_html_components/./src/components/Frameset.react.js","webpack://dash_html_components/./src/components/H1.react.js","webpack://dash_html_components/./src/components/H2.react.js","webpack://dash_html_components/./src/components/H3.react.js","webpack://dash_html_components/./src/components/H4.react.js","webpack://dash_html_components/./src/components/H5.react.js","webpack://dash_html_components/./src/components/H6.react.js","webpack://dash_html_components/./src/components/Header.react.js","webpack://dash_html_components/./src/components/Hgroup.react.js","webpack://dash_html_components/./src/components/Hr.react.js","webpack://dash_html_components/./src/components/I.react.js","webpack://dash_html_components/./src/components/Iframe.react.js","webpack://dash_html_components/./src/components/Img.react.js","webpack://dash_html_components/./src/components/Ins.react.js","webpack://dash_html_components/./src/components/Kbd.react.js","webpack://dash_html_components/./src/components/Keygen.react.js","webpack://dash_html_components/./src/components/Label.react.js","webpack://dash_html_components/./src/components/Legend.react.js","webpack://dash_html_components/./src/components/Li.react.js","webpack://dash_html_components/./src/components/Link.react.js","webpack://dash_html_components/./src/components/Main.react.js","webpack://dash_html_components/./src/components/MapEl.react.js","webpack://dash_html_components/./src/components/Mark.react.js","webpack://dash_html_components/./src/components/Marquee.react.js","webpack://dash_html_components/./src/components/Meta.react.js","webpack://dash_html_components/./src/components/Meter.react.js","webpack://dash_html_components/./src/components/Nav.react.js","webpack://dash_html_components/./src/components/Nobr.react.js","webpack://dash_html_components/./src/components/Noscript.react.js","webpack://dash_html_components/./src/components/ObjectEl.react.js","webpack://dash_html_components/./src/components/Ol.react.js","webpack://dash_html_components/./src/components/Optgroup.react.js","webpack://dash_html_components/./src/components/Option.react.js","webpack://dash_html_components/./src/components/Output.react.js","webpack://dash_html_components/./src/components/P.react.js","webpack://dash_html_components/./src/components/Param.react.js","webpack://dash_html_components/./src/components/Picture.react.js","webpack://dash_html_components/./src/components/Plaintext.react.js","webpack://dash_html_components/./src/components/Pre.react.js","webpack://dash_html_components/./src/components/Progress.react.js","webpack://dash_html_components/./src/components/Q.react.js","webpack://dash_html_components/./src/components/Rb.react.js","webpack://dash_html_components/./src/components/Rp.react.js","webpack://dash_html_components/./src/components/Rt.react.js","webpack://dash_html_components/./src/components/Rtc.react.js","webpack://dash_html_components/./src/components/Ruby.react.js","webpack://dash_html_components/./src/components/S.react.js","webpack://dash_html_components/./src/components/Samp.react.js","webpack://dash_html_components/./src/components/Script.react.js","webpack://dash_html_components/./src/components/Section.react.js","webpack://dash_html_components/./src/components/Select.react.js","webpack://dash_html_components/./src/components/Shadow.react.js","webpack://dash_html_components/./src/components/Slot.react.js","webpack://dash_html_components/./src/components/Small.react.js","webpack://dash_html_components/./src/components/Source.react.js","webpack://dash_html_components/./src/components/Spacer.react.js","webpack://dash_html_components/./src/components/Span.react.js","webpack://dash_html_components/./src/components/Strike.react.js","webpack://dash_html_components/./src/components/Strong.react.js","webpack://dash_html_components/./src/components/Sub.react.js","webpack://dash_html_components/./src/components/Summary.react.js","webpack://dash_html_components/./src/components/Sup.react.js","webpack://dash_html_components/./src/components/Table.react.js","webpack://dash_html_components/./src/components/Tbody.react.js","webpack://dash_html_components/./src/components/Td.react.js","webpack://dash_html_components/./src/components/Template.react.js","webpack://dash_html_components/./src/components/Textarea.react.js","webpack://dash_html_components/./src/components/Tfoot.react.js","webpack://dash_html_components/./src/components/Th.react.js","webpack://dash_html_components/./src/components/Thead.react.js","webpack://dash_html_components/./src/components/Time.react.js","webpack://dash_html_components/./src/components/Title.react.js","webpack://dash_html_components/./src/components/Tr.react.js","webpack://dash_html_components/./src/components/Track.react.js","webpack://dash_html_components/./src/components/U.react.js","webpack://dash_html_components/./src/components/Ul.react.js","webpack://dash_html_components/./src/components/Var.react.js","webpack://dash_html_components/./src/components/Video.react.js","webpack://dash_html_components/./src/components/Wbr.react.js","webpack://dash_html_components/./src/components/Xmp.react.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"PropTypes\"];","export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from \"./_curry1.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nvar omit = /*#__PURE__*/_curry2(function omit(names, obj) {\n  var result = {};\n  var index = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    index[names[idx]] = 1;\n    idx += 1;\n  }\n  for (var prop in obj) {\n    if (!index.hasOwnProperty(prop)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\nexport default omit;","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * A is a wrapper for the <a> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n */\nconst A = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n    const cleanUrl = window.dash_clientside.clean_url;\n    const href = React.useMemo(() => props.href && cleanUrl(props.href), [props.href]);\n    \n    if (href) {\n        extraProps.href = href;\n    }\n    \n    React.useEffect(() => {\n        if (href && href !== props.href) {\n            props.setProps({_dash_error: new Error(`Dangerous link detected: ${props.href}`)})\n        }\n    }, [props.href, href]);\n    \n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <a\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </a>\n    );\n};\n\n\nA.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates that the hyperlink is to be used for downloading a resource.\n     */\n    'download': PropTypes.string,\n\n    /**\n     * The URL of a linked resource.\n     */\n    'href': PropTypes.string,\n\n    /**\n     * Specifies the language of the linked resource.\n     */\n    'hrefLang': PropTypes.string,\n\n    /**\n     * Specifies a hint of the media for which the linked resource was designed.\n     */\n    'media': PropTypes.string,\n\n    /**\n     * Specifies which referrer is sent when fetching the resource.\n     */\n    'referrerPolicy': PropTypes.string,\n\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    'rel': PropTypes.string,\n\n    /**\n     *\n     */\n    'shape': PropTypes.string,\n\n    /**\n     * Specifies where to open the linked document (in the case of an <a> element) or where to display the response received (in the case of a <form> element)\n     */\n    'target': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default A;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Abbr is a wrapper for the <abbr> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\n */\nconst Abbr = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <abbr\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </abbr>\n    );\n};\n\n\nAbbr.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Abbr;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Acronym is a wrapper for the <acronym> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym\n */\nconst Acronym = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <acronym\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </acronym>\n    );\n};\n\n\nAcronym.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Acronym;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Address is a wrapper for the <address> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address\n */\nconst Address = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <address\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </address>\n    );\n};\n\n\nAddress.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Address;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Area is a wrapper for the <area> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area\n */\nconst Area = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <area\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </area>\n    );\n};\n\n\nArea.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Alternative text in case an image can't be displayed.\n     */\n    'alt': PropTypes.string,\n\n    /**\n     * A set of values specifying the coordinates of the hot-spot region.\n     */\n    'coords': PropTypes.string,\n\n    /**\n     * Indicates that the hyperlink is to be used for downloading a resource.\n     */\n    'download': PropTypes.string,\n\n    /**\n     * The URL of a linked resource.\n     */\n    'href': PropTypes.string,\n\n    /**\n     * Specifies a hint of the media for which the linked resource was designed.\n     */\n    'media': PropTypes.string,\n\n    /**\n     * Specifies which referrer is sent when fetching the resource.\n     */\n    'referrerPolicy': PropTypes.string,\n\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    'rel': PropTypes.string,\n\n    /**\n     *\n     */\n    'shape': PropTypes.string,\n\n    /**\n     * Specifies where to open the linked document (in the case of an <a> element) or where to display the response received (in the case of a <form> element)\n     */\n    'target': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Area;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Article is a wrapper for the <article> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\n */\nconst Article = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <article\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </article>\n    );\n};\n\n\nArticle.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Article;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Aside is a wrapper for the <aside> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside\n */\nconst Aside = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <aside\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </aside>\n    );\n};\n\n\nAside.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Aside;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Audio is a wrapper for the <audio> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\n */\nconst Audio = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <audio\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </audio>\n    );\n};\n\n\nAudio.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The audio or video should play as soon as possible.\n     */\n    'autoPlay': PropTypes.oneOfType([\n        PropTypes.oneOf(['autoPlay', 'autoplay', 'AUTOPLAY']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether the browser should show playback controls to the user.\n     */\n    'controls': PropTypes.oneOfType([\n        PropTypes.oneOf(['controls', 'CONTROLS']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * How the element handles cross-origin requests\n     */\n    'crossOrigin': PropTypes.string,\n\n    /**\n     * Indicates whether the media should start playing from the start when it's finished.\n     */\n    'loop': PropTypes.oneOfType([\n        PropTypes.oneOf(['loop', 'LOOP']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether the audio will be initially silenced on page load.\n     */\n    'muted': PropTypes.oneOfType([\n        PropTypes.oneOf(['muted', 'MUTED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether the whole resource, parts of it or nothing should be preloaded.\n     */\n    'preload': PropTypes.string,\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Audio;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * B is a wrapper for the <b> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\n */\nconst B = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <b\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </b>\n    );\n};\n\n\nB.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default B;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Base is a wrapper for the <base> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\n */\nconst Base = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <base\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </base>\n    );\n};\n\n\nBase.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The URL of a linked resource.\n     */\n    'href': PropTypes.string,\n\n    /**\n     * Specifies where to open the linked document (in the case of an <a> element) or where to display the response received (in the case of a <form> element)\n     */\n    'target': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Base;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Basefont is a wrapper for the <basefont> HTML5 element.\n *\n * OBSOLETE: <basefont> is included for completeness, but should be avoided\n * as it is only supported by Internet Explorer.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/basefont\n */\nconst Basefont = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <basefont\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </basefont>\n    );\n};\n\n\nBasefont.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Basefont;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Bdi is a wrapper for the <bdi> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi\n */\nconst Bdi = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <bdi\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </bdi>\n    );\n};\n\n\nBdi.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Bdi;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Bdo is a wrapper for the <bdo> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo\n */\nconst Bdo = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <bdo\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </bdo>\n    );\n};\n\n\nBdo.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Bdo;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Big is a wrapper for the <big> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big\n */\nconst Big = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <big\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </big>\n    );\n};\n\n\nBig.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Big;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Blink is a wrapper for the <blink> HTML5 element.\n *\n * OBSOLETE: <blink> is included for completeness, but should be avoided\n * as it is not supported by any modern browsers.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink\n */\nconst Blink = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <blink\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </blink>\n    );\n};\n\n\nBlink.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Blink;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Blockquote is a wrapper for the <blockquote> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\n */\nconst Blockquote = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <blockquote\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </blockquote>\n    );\n};\n\n\nBlockquote.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Contains a URI which points to the source of the quote or change.\n     */\n    'cite': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Blockquote;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Br is a wrapper for the <br> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br\n */\nconst Br = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <br\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </br>\n    );\n};\n\n\nBr.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Br;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Button is a wrapper for the <button> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\n */\nconst Button = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n    const cleanUrl = window.dash_clientside.clean_url;\n    const formAction = React.useMemo(() => props.formAction && cleanUrl(props.formAction), [props.formAction]);\n    \n    if (formAction) {\n        extraProps.formAction = formAction;\n    }\n    \n    React.useEffect(() => {\n        if (formAction && formAction !== props.formAction) {\n            props.setProps({_dash_error: new Error(`Dangerous link detected: ${props.formAction}`)})\n        }\n    }, [props.formAction, formAction]);\n    \n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <button\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </button>\n    );\n};\n\n\nButton.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The element should be automatically focused after the page loaded.\n     */\n    'autoFocus': PropTypes.oneOfType([\n        PropTypes.oneOf(['autoFocus', 'autofocus', 'AUTOFOCUS']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether the user can interact with the element.\n     */\n    'disabled': PropTypes.oneOfType([\n        PropTypes.oneOf(['disabled', 'DISABLED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Indicates the action of the element, overriding the action defined in the <form>.\n     */\n    'formAction': PropTypes.string,\n\n    /**\n     * If the button/input is a submit button (e.g. type=\"submit\"), this attribute sets the encoding type to use during form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner.\n     */\n    'formEncType': PropTypes.string,\n\n    /**\n     * If the button/input is a submit button (e.g. type=\"submit\"), this attribute sets the submission method to use during form submission (GET, POST, etc.). If this attribute is specified, it overrides the method attribute of the button's form owner.\n     */\n    'formMethod': PropTypes.string,\n\n    /**\n     * If the button/input is a submit button (e.g. type=\"submit\"), this boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.\n     */\n    'formNoValidate': PropTypes.oneOfType([\n        PropTypes.oneOf(['formNoValidate', 'formnovalidate', 'FORMNOVALIDATE']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * If the button/input is a submit button (e.g. type=\"submit\"), this attribute specifies the browsing context (for example, tab, window, or inline frame) in which to display the response that is received after submitting the form. If this attribute is specified, it overrides the target attribute of the button's form owner.\n     */\n    'formTarget': PropTypes.string,\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Defines the type of the element.\n     */\n    'type': PropTypes.string,\n\n    /**\n     * Defines a default value which will be displayed in the element on page load.\n     */\n    'value': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Button;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Canvas is a wrapper for the <canvas> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\n */\nconst Canvas = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <canvas\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </canvas>\n    );\n};\n\n\nCanvas.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Specifies the height of elements listed here. For all other elements, use the CSS height property. Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\n     */\n    'height': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * For the elements listed here, this establishes the element's width. Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\n     */\n    'width': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Canvas;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Caption is a wrapper for the <caption> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n */\nconst Caption = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <caption\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </caption>\n    );\n};\n\n\nCaption.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Caption;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Center is a wrapper for the <center> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center\n */\nconst Center = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <center\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </center>\n    );\n};\n\n\nCenter.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Center;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Cite is a wrapper for the <cite> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite\n */\nconst Cite = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <cite\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </cite>\n    );\n};\n\n\nCite.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Cite;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Code is a wrapper for the <code> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\n */\nconst Code = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <code\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </code>\n    );\n};\n\n\nCode.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Code;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Col is a wrapper for the <col> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col\n */\nconst Col = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <col\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </col>\n    );\n};\n\n\nCol.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     *\n     */\n    'span': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Col;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Colgroup is a wrapper for the <colgroup> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup\n */\nconst Colgroup = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <colgroup\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </colgroup>\n    );\n};\n\n\nColgroup.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     *\n     */\n    'span': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Colgroup;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Content is a wrapper for the <content> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/content\n */\nconst Content = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <content\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </content>\n    );\n};\n\n\nContent.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Content;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Data is a wrapper for the <data> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data\n */\nconst Data = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <data\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </data>\n    );\n};\n\n\nData.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Defines a default value which will be displayed in the element on page load.\n     */\n    'value': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Data;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Datalist is a wrapper for the <datalist> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\n */\nconst Datalist = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <datalist\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </datalist>\n    );\n};\n\n\nDatalist.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Datalist;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Dd is a wrapper for the <dd> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\n */\nconst Dd = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <dd\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </dd>\n    );\n};\n\n\nDd.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Dd;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Del is a wrapper for the <del> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\n */\nconst Del = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <del\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </del>\n    );\n};\n\n\nDel.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Contains a URI which points to the source of the quote or change.\n     */\n    'cite': PropTypes.string,\n\n    /**\n     * Indicates the date and time associated with the element.\n     */\n    'dateTime': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Del;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Details is a wrapper for the <details> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\n */\nconst Details = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <details\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </details>\n    );\n};\n\n\nDetails.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates whether the contents are currently visible (in the case of a <details> element) or whether the dialog is active and can be interacted with (in the case of a <dialog> element).\n     */\n    'open': PropTypes.oneOfType([\n        PropTypes.oneOf(['open', 'OPEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Details;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Dfn is a wrapper for the <dfn> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn\n */\nconst Dfn = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <dfn\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </dfn>\n    );\n};\n\n\nDfn.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Dfn;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Dialog is a wrapper for the <dialog> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\n */\nconst Dialog = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <dialog\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </dialog>\n    );\n};\n\n\nDialog.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates whether the contents are currently visible (in the case of a <details> element) or whether the dialog is active and can be interacted with (in the case of a <dialog> element).\n     */\n    'open': PropTypes.oneOfType([\n        PropTypes.oneOf(['open', 'OPEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Dialog;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Div is a wrapper for the <div> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\n */\nconst Div = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <div\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </div>\n    );\n};\n\n\nDiv.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Div;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Dl is a wrapper for the <dl> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\n */\nconst Dl = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <dl\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </dl>\n    );\n};\n\n\nDl.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Dl;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Dt is a wrapper for the <dt> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\n */\nconst Dt = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <dt\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </dt>\n    );\n};\n\n\nDt.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Dt;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Em is a wrapper for the <em> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em\n */\nconst Em = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <em\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </em>\n    );\n};\n\n\nEm.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Em;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Embed is a wrapper for the <embed> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed\n */\nconst Embed = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n    const cleanUrl = window.dash_clientside.clean_url;\n    const src = React.useMemo(() => props.src && cleanUrl(props.src), [props.src]);\n    \n    if (src) {\n        extraProps.src = src;\n    }\n    \n    React.useEffect(() => {\n        if (src && src !== props.src) {\n            props.setProps({_dash_error: new Error(`Dangerous link detected: ${props.src}`)})\n        }\n    }, [props.src, src]);\n    \n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <embed\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </embed>\n    );\n};\n\n\nEmbed.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Specifies the height of elements listed here. For all other elements, use the CSS height property. Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\n     */\n    'height': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     * Defines the type of the element.\n     */\n    'type': PropTypes.string,\n\n    /**\n     * For the elements listed here, this establishes the element's width. Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\n     */\n    'width': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Embed;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Fieldset is a wrapper for the <fieldset> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\n */\nconst Fieldset = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <fieldset\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </fieldset>\n    );\n};\n\n\nFieldset.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates whether the user can interact with the element.\n     */\n    'disabled': PropTypes.oneOfType([\n        PropTypes.oneOf(['disabled', 'DISABLED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Fieldset;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Figcaption is a wrapper for the <figcaption> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption\n */\nconst Figcaption = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <figcaption\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </figcaption>\n    );\n};\n\n\nFigcaption.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Figcaption;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Figure is a wrapper for the <figure> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\n */\nconst Figure = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <figure\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </figure>\n    );\n};\n\n\nFigure.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Figure;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Font is a wrapper for the <font> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font\n */\nconst Font = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <font\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </font>\n    );\n};\n\n\nFont.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Font;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Footer is a wrapper for the <footer> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\n */\nconst Footer = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <footer\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </footer>\n    );\n};\n\n\nFooter.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Footer;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Form is a wrapper for the <form> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\n */\nconst Form = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n    const cleanUrl = window.dash_clientside.clean_url;\n    const action = React.useMemo(() => props.action && cleanUrl(props.action), [props.action]);\n    \n    if (action) {\n        extraProps.action = action;\n    }\n    \n    React.useEffect(() => {\n        if (action && action !== props.action) {\n            props.setProps({_dash_error: new Error(`Dangerous link detected: ${props.action}`)})\n        }\n    }, [props.action, action]);\n    \n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <form\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </form>\n    );\n};\n\n\nForm.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * List of types the server accepts, typically a file type.\n     */\n    'accept': PropTypes.string,\n\n    /**\n     * List of supported charsets.\n     */\n    'acceptCharset': PropTypes.string,\n\n    /**\n     * The URI of a program that processes the information submitted via the form.\n     */\n    'action': PropTypes.string,\n\n    /**\n     * Indicates whether controls in this form can by default have their values automatically completed by the browser.\n     */\n    'autoComplete': PropTypes.string,\n\n    /**\n     * Defines the content type of the form data when the method is POST.\n     */\n    'encType': PropTypes.string,\n\n    /**\n     * Defines which HTTP method to use when submitting the form. Can be GET (default) or POST.\n     */\n    'method': PropTypes.string,\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * This attribute indicates that the form shouldn't be validated when submitted.\n     */\n    'noValidate': PropTypes.oneOfType([\n        PropTypes.oneOf(['noValidate', 'novalidate', 'NOVALIDATE']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Specifies where to open the linked document (in the case of an <a> element) or where to display the response received (in the case of a <form> element)\n     */\n    'target': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Form;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Frame is a wrapper for the <frame> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame\n */\nconst Frame = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <frame\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </frame>\n    );\n};\n\n\nFrame.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Frame;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Frameset is a wrapper for the <frameset> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset\n */\nconst Frameset = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <frameset\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </frameset>\n    );\n};\n\n\nFrameset.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Frameset;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * H1 is a wrapper for the <h1> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1\n */\nconst H1 = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <h1\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </h1>\n    );\n};\n\n\nH1.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default H1;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * H2 is a wrapper for the <h2> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2\n */\nconst H2 = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <h2\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </h2>\n    );\n};\n\n\nH2.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default H2;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * H3 is a wrapper for the <h3> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3\n */\nconst H3 = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <h3\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </h3>\n    );\n};\n\n\nH3.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default H3;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * H4 is a wrapper for the <h4> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4\n */\nconst H4 = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <h4\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </h4>\n    );\n};\n\n\nH4.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default H4;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * H5 is a wrapper for the <h5> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5\n */\nconst H5 = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <h5\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </h5>\n    );\n};\n\n\nH5.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default H5;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * H6 is a wrapper for the <h6> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6\n */\nconst H6 = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <h6\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </h6>\n    );\n};\n\n\nH6.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default H6;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Header is a wrapper for the <header> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\n */\nconst Header = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <header\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </header>\n    );\n};\n\n\nHeader.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Header;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Hgroup is a wrapper for the <hgroup> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup\n */\nconst Hgroup = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <hgroup\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </hgroup>\n    );\n};\n\n\nHgroup.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Hgroup;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Hr is a wrapper for the <hr> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\n */\nconst Hr = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <hr\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </hr>\n    );\n};\n\n\nHr.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Hr;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * I is a wrapper for the <i> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\n */\nconst I = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <i\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </i>\n    );\n};\n\n\nI.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default I;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Iframe is a wrapper for the <iframe> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\n */\nconst Iframe = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n    const cleanUrl = window.dash_clientside.clean_url;\n    const src = React.useMemo(() => props.src && cleanUrl(props.src), [props.src]);\n    \n    if (src) {\n        extraProps.src = src;\n    }\n    \n    React.useEffect(() => {\n        if (src && src !== props.src) {\n            props.setProps({_dash_error: new Error(`Dangerous link detected: ${props.src}`)})\n        }\n    }, [props.src, src]);\n    \n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <iframe\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </iframe>\n    );\n};\n\n\nIframe.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Specifies a feature-policy for the iframe.\n     */\n    'allow': PropTypes.string,\n\n    /**\n     * Specifies the height of elements listed here. For all other elements, use the CSS height property. Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\n     */\n    'height': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Specifies which referrer is sent when fetching the resource.\n     */\n    'referrerPolicy': PropTypes.string,\n\n    /**\n     * Stops a document loaded in an iframe from using certain features (such as submitting forms or opening new windows).\n     */\n    'sandbox': PropTypes.string,\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     *\n     */\n    'srcDoc': PropTypes.string,\n\n    /**\n     * For the elements listed here, this establishes the element's width. Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\n     */\n    'width': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Iframe;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Img is a wrapper for the <img> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\n */\nconst Img = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <img\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </img>\n    );\n};\n\n\nImg.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Alternative text in case an image can't be displayed.\n     */\n    'alt': PropTypes.string,\n\n    /**\n     * How the element handles cross-origin requests\n     */\n    'crossOrigin': PropTypes.string,\n\n    /**\n     * Specifies the height of elements listed here. For all other elements, use the CSS height property. Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\n     */\n    'height': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Specifies which referrer is sent when fetching the resource.\n     */\n    'referrerPolicy': PropTypes.string,\n\n    /**\n     *\n     */\n    'sizes': PropTypes.string,\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     * One or more responsive image candidates.\n     */\n    'srcSet': PropTypes.string,\n\n    /**\n     *\n     */\n    'useMap': PropTypes.string,\n\n    /**\n     * For the elements listed here, this establishes the element's width. Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\n     */\n    'width': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Img;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Ins is a wrapper for the <ins> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins\n */\nconst Ins = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <ins\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </ins>\n    );\n};\n\n\nIns.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Contains a URI which points to the source of the quote or change.\n     */\n    'cite': PropTypes.string,\n\n    /**\n     * Indicates the date and time associated with the element.\n     */\n    'dateTime': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Ins;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Kbd is a wrapper for the <kbd> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd\n */\nconst Kbd = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <kbd\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </kbd>\n    );\n};\n\n\nKbd.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Kbd;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Keygen is a wrapper for the <keygen> HTML5 element.\n *\n * DEPRECATED: <keygen> is included for completeness, but should be avoided\n * as it is not supported by all browsers and may be removed at any time from\n * those that do support it.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen\n */\nconst Keygen = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <keygen\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </keygen>\n    );\n};\n\n\nKeygen.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Keygen;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Label is a wrapper for the <label> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\n */\nconst Label = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <label\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </label>\n    );\n};\n\n\nLabel.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Describes elements which belongs to this one.\n     */\n    'htmlFor': PropTypes.string,\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Label;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Legend is a wrapper for the <legend> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend\n */\nconst Legend = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <legend\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </legend>\n    );\n};\n\n\nLegend.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Legend;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Li is a wrapper for the <li> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\n */\nconst Li = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <li\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </li>\n    );\n};\n\n\nLi.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Defines a default value which will be displayed in the element on page load.\n     */\n    'value': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Li;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Link is a wrapper for the <link> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\n */\nconst Link = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <link\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </link>\n    );\n};\n\n\nLink.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * How the element handles cross-origin requests\n     */\n    'crossOrigin': PropTypes.string,\n\n    /**\n     * The URL of a linked resource.\n     */\n    'href': PropTypes.string,\n\n    /**\n     * Specifies the language of the linked resource.\n     */\n    'hrefLang': PropTypes.string,\n\n    /**\n     * Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\n     */\n    'integrity': PropTypes.string,\n\n    /**\n     * Specifies a hint of the media for which the linked resource was designed.\n     */\n    'media': PropTypes.string,\n\n    /**\n     * Specifies which referrer is sent when fetching the resource.\n     */\n    'referrerPolicy': PropTypes.string,\n\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    'rel': PropTypes.string,\n\n    /**\n     *\n     */\n    'sizes': PropTypes.string,\n\n    /**\n     * Defines the type of the element.\n     */\n    'type': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Link;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Main is a wrapper for the <main> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main\n */\nconst Main = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <main\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </main>\n    );\n};\n\n\nMain.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Main;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * MapEl is a wrapper for the <map> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map\n */\nconst MapEl = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <map\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </map>\n    );\n};\n\n\nMapEl.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default MapEl;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Mark is a wrapper for the <mark> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark\n */\nconst Mark = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <mark\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </mark>\n    );\n};\n\n\nMark.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Mark;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Marquee is a wrapper for the <marquee> HTML5 element.\n *\n * DEPRECATED: <marquee> is included for completeness, but should be avoided\n * as browsers may remove it at any time.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee\n */\nconst Marquee = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <marquee\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </marquee>\n    );\n};\n\n\nMarquee.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates whether the media should start playing from the start when it's finished.\n     */\n    'loop': PropTypes.oneOfType([\n        PropTypes.oneOf(['loop', 'LOOP']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Marquee;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Meta is a wrapper for the <meta> HTML5 element.\n *\n * CAUTION: <meta> is included for completeness, but generally will not behave\n * as expected since <meta> tags should be static HTML content in the <head> of\n * the document. Dash components are dynamic <body> content.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\n */\nconst Meta = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <meta\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </meta>\n    );\n};\n\n\nMeta.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Declares the character encoding of the page or script.\n     */\n    'charSet': PropTypes.string,\n\n    /**\n     * A value associated with http-equiv or name depending on the context.\n     */\n    'content': PropTypes.string,\n\n    /**\n     * Defines a pragma directive.\n     */\n    'httpEquiv': PropTypes.string,\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Meta;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Meter is a wrapper for the <meter> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter\n */\nconst Meter = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <meter\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </meter>\n    );\n};\n\n\nMeter.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Indicates the lower bound of the upper range.\n     */\n    'high': PropTypes.string,\n\n    /**\n     * Indicates the upper bound of the lower range.\n     */\n    'low': PropTypes.string,\n\n    /**\n     * Indicates the maximum value allowed.\n     */\n    'max': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Indicates the minimum value allowed.\n     */\n    'min': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Indicates the optimal numeric value.\n     */\n    'optimum': PropTypes.string,\n\n    /**\n     * Defines a default value which will be displayed in the element on page load.\n     */\n    'value': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Meter;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Nav is a wrapper for the <nav> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\n */\nconst Nav = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <nav\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </nav>\n    );\n};\n\n\nNav.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Nav;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Nobr is a wrapper for the <nobr> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr\n */\nconst Nobr = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <nobr\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </nobr>\n    );\n};\n\n\nNobr.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Nobr;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Noscript is a wrapper for the <noscript> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript\n */\nconst Noscript = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <noscript\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </noscript>\n    );\n};\n\n\nNoscript.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Noscript;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * ObjectEl is a wrapper for the <object> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object\n */\nconst ObjectEl = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n    const cleanUrl = window.dash_clientside.clean_url;\n    const data = React.useMemo(() => props.data && cleanUrl(props.data), [props.data]);\n    \n    if (data) {\n        extraProps.data = data;\n    }\n    \n    React.useEffect(() => {\n        if (data && data !== props.data) {\n            props.setProps({_dash_error: new Error(`Dangerous link detected: ${props.data}`)})\n        }\n    }, [props.data, data]);\n    \n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <object\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </object>\n    );\n};\n\n\nObjectEl.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Specifies the URL of the resource.\n     */\n    'data': PropTypes.string,\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Specifies the height of elements listed here. For all other elements, use the CSS height property. Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\n     */\n    'height': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Defines the type of the element.\n     */\n    'type': PropTypes.string,\n\n    /**\n     *\n     */\n    'useMap': PropTypes.string,\n\n    /**\n     * For the elements listed here, this establishes the element's width. Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\n     */\n    'width': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default ObjectEl;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Ol is a wrapper for the <ol> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\n */\nconst Ol = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <ol\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </ol>\n    );\n};\n\n\nOl.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates whether the list should be displayed in a descending order instead of an ascending order.\n     */\n    'reversed': PropTypes.oneOfType([\n        PropTypes.oneOf(['reversed', 'REVERSED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the first number if other than 1.\n     */\n    'start': PropTypes.string,\n\n    /**\n     * Defines the type of the element.\n     */\n    'type': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Ol;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Optgroup is a wrapper for the <optgroup> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup\n */\nconst Optgroup = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <optgroup\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </optgroup>\n    );\n};\n\n\nOptgroup.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates whether the user can interact with the element.\n     */\n    'disabled': PropTypes.oneOfType([\n        PropTypes.oneOf(['disabled', 'DISABLED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Specifies a user-readable title of the element.\n     */\n    'label': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Optgroup;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Option is a wrapper for the <option> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\n */\nconst Option = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <option\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </option>\n    );\n};\n\n\nOption.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates whether the user can interact with the element.\n     */\n    'disabled': PropTypes.oneOfType([\n        PropTypes.oneOf(['disabled', 'DISABLED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Specifies a user-readable title of the element.\n     */\n    'label': PropTypes.string,\n\n    /**\n     * Defines a value which will be selected on page load.\n     */\n    'selected': PropTypes.oneOfType([\n        PropTypes.oneOf(['selected', 'SELECTED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines a default value which will be displayed in the element on page load.\n     */\n    'value': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Option;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Output is a wrapper for the <output> HTML5 element.\n *\n * CAUTION: <output> is included for completeness, but its typical usage\n * requires the oninput attribute of the enclosing <form> element, which\n * is not accessible to Dash.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output\n */\nconst Output = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <output\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </output>\n    );\n};\n\n\nOutput.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Describes elements which belongs to this one.\n     */\n    'htmlFor': PropTypes.string,\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Output;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * P is a wrapper for the <p> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\n */\nconst P = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <p\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </p>\n    );\n};\n\n\nP.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default P;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Param is a wrapper for the <param> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param\n */\nconst Param = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <param\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </param>\n    );\n};\n\n\nParam.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Defines a default value which will be displayed in the element on page load.\n     */\n    'value': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Param;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Picture is a wrapper for the <picture> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture\n */\nconst Picture = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <picture\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </picture>\n    );\n};\n\n\nPicture.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Picture;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Plaintext is a wrapper for the <plaintext> HTML5 element.\n *\n * OBSOLETE: <plaintext> is included for completeness, but should be avoided\n * as browsers may remove it at any time, and its behavior when added\n * dynamically by Dash is not what it would be statically on page load.\n * Use <pre> or <code> instead.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/plaintext\n */\nconst Plaintext = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <plaintext\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </plaintext>\n    );\n};\n\n\nPlaintext.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Plaintext;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Pre is a wrapper for the <pre> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\n */\nconst Pre = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <pre\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </pre>\n    );\n};\n\n\nPre.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Pre;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Progress is a wrapper for the <progress> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress\n */\nconst Progress = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <progress\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </progress>\n    );\n};\n\n\nProgress.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Indicates the maximum value allowed.\n     */\n    'max': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Defines a default value which will be displayed in the element on page load.\n     */\n    'value': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Progress;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Q is a wrapper for the <q> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\n */\nconst Q = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <q\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </q>\n    );\n};\n\n\nQ.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Contains a URI which points to the source of the quote or change.\n     */\n    'cite': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Q;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Rb is a wrapper for the <rb> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb\n */\nconst Rb = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <rb\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </rb>\n    );\n};\n\n\nRb.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Rb;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Rp is a wrapper for the <rp> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp\n */\nconst Rp = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <rp\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </rp>\n    );\n};\n\n\nRp.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Rp;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Rt is a wrapper for the <rt> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt\n */\nconst Rt = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <rt\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </rt>\n    );\n};\n\n\nRt.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Rt;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Rtc is a wrapper for the <rtc> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc\n */\nconst Rtc = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <rtc\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </rtc>\n    );\n};\n\n\nRtc.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Rtc;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Ruby is a wrapper for the <ruby> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby\n */\nconst Ruby = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <ruby\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </ruby>\n    );\n};\n\n\nRuby.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Ruby;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * S is a wrapper for the <s> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s\n */\nconst S = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <s\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </s>\n    );\n};\n\n\nS.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default S;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Samp is a wrapper for the <samp> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp\n */\nconst Samp = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <samp\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </samp>\n    );\n};\n\n\nSamp.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Samp;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Script is a wrapper for the <script> HTML5 element.\n *\n * CAUTION: <script> is included for completeness, but you cannot execute\n * JavaScript code by providing it to a <script> element. Use a clientside\n * callback for this purpose instead.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\n */\nconst Script = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <script\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </script>\n    );\n};\n\n\nScript.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Executes the script asynchronously.\n     */\n    'async': PropTypes.oneOfType([\n        PropTypes.oneOf(['async', 'ASYNC']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * How the element handles cross-origin requests\n     */\n    'crossOrigin': PropTypes.string,\n\n    /**\n     * Indicates that the script should be executed after the page has been parsed.\n     */\n    'defer': PropTypes.oneOfType([\n        PropTypes.oneOf(['defer', 'DEFER']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\n     */\n    'integrity': PropTypes.string,\n\n    /**\n     * Specifies which referrer is sent when fetching the resource.\n     */\n    'referrerPolicy': PropTypes.string,\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     * Defines the type of the element.\n     */\n    'type': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Script;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Section is a wrapper for the <section> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\n */\nconst Section = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <section\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </section>\n    );\n};\n\n\nSection.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Section;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Select is a wrapper for the <select> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\n */\nconst Select = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <select\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </select>\n    );\n};\n\n\nSelect.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The element should be automatically focused after the page loaded.\n     */\n    'autoFocus': PropTypes.oneOfType([\n        PropTypes.oneOf(['autoFocus', 'autofocus', 'AUTOFOCUS']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether controls in this form can by default have their values automatically completed by the browser.\n     */\n    'autoComplete': PropTypes.string,\n\n    /**\n     * Indicates whether the user can interact with the element.\n     */\n    'disabled': PropTypes.oneOfType([\n        PropTypes.oneOf(['disabled', 'DISABLED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Indicates whether multiple values can be entered in an input of the type email or file.\n     */\n    'multiple': PropTypes.oneOfType([\n        PropTypes.oneOf(['multiple', 'MULTIPLE']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Indicates whether this element is required to fill out or not.\n     */\n    'required': PropTypes.oneOfType([\n        PropTypes.oneOf(['required', 'REQUIRED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the width of the element (in pixels). If the element's type attribute is text or password then it's the number of characters.\n     */\n    'size': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Select;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Shadow is a wrapper for the <shadow> HTML5 element.\n *\n * DEPRECATED: <shadow> is included for completeness, but should be avoided\n * as it is not supported by all browsers and may be removed at any time from\n * those that do support it.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/shadow\n */\nconst Shadow = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <shadow\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </shadow>\n    );\n};\n\n\nShadow.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Shadow;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Slot is a wrapper for the <slot> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot\n */\nconst Slot = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <slot\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </slot>\n    );\n};\n\n\nSlot.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Slot;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Small is a wrapper for the <small> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small\n */\nconst Small = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <small\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </small>\n    );\n};\n\n\nSmall.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Small;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Source is a wrapper for the <source> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\n */\nconst Source = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <source\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </source>\n    );\n};\n\n\nSource.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Specifies a hint of the media for which the linked resource was designed.\n     */\n    'media': PropTypes.string,\n\n    /**\n     *\n     */\n    'sizes': PropTypes.string,\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     * One or more responsive image candidates.\n     */\n    'srcSet': PropTypes.string,\n\n    /**\n     * Defines the type of the element.\n     */\n    'type': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Source;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Spacer is a wrapper for the <spacer> HTML5 element.\n *\n * OBSOLETE: <spacer> is included for completeness, but should be avoided\n * as it is not supported by any modern browsers.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/spacer\n */\nconst Spacer = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <spacer\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </spacer>\n    );\n};\n\n\nSpacer.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Spacer;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Span is a wrapper for the <span> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\n */\nconst Span = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <span\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </span>\n    );\n};\n\n\nSpan.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Span;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Strike is a wrapper for the <strike> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike\n */\nconst Strike = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <strike\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </strike>\n    );\n};\n\n\nStrike.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Strike;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Strong is a wrapper for the <strong> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\n */\nconst Strong = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <strong\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </strong>\n    );\n};\n\n\nStrong.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Strong;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Sub is a wrapper for the <sub> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub\n */\nconst Sub = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <sub\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </sub>\n    );\n};\n\n\nSub.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Sub;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Summary is a wrapper for the <summary> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary\n */\nconst Summary = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <summary\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </summary>\n    );\n};\n\n\nSummary.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Summary;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Sup is a wrapper for the <sup> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup\n */\nconst Sup = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <sup\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </sup>\n    );\n};\n\n\nSup.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Sup;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Table is a wrapper for the <table> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\n */\nconst Table = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <table\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </table>\n    );\n};\n\n\nTable.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Table;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Tbody is a wrapper for the <tbody> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\n */\nconst Tbody = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <tbody\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </tbody>\n    );\n};\n\n\nTbody.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Tbody;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Td is a wrapper for the <td> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n */\nconst Td = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <td\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </td>\n    );\n};\n\n\nTd.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The colspan attribute defines the number of columns a cell should span.\n     */\n    'colSpan': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * IDs of the <th> elements which applies to this element.\n     */\n    'headers': PropTypes.string,\n\n    /**\n     * Defines the number of rows a table cell should span over.\n     */\n    'rowSpan': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Td;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Template is a wrapper for the <template> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\n */\nconst Template = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <template\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </template>\n    );\n};\n\n\nTemplate.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Template;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Textarea is a wrapper for the <textarea> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea\n */\nconst Textarea = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <textarea\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </textarea>\n    );\n};\n\n\nTextarea.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The element should be automatically focused after the page loaded.\n     */\n    'autoFocus': PropTypes.oneOfType([\n        PropTypes.oneOf(['autoFocus', 'autofocus', 'AUTOFOCUS']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether controls in this form can by default have their values automatically completed by the browser.\n     */\n    'autoComplete': PropTypes.string,\n\n    /**\n     * Defines the number of columns in a textarea.\n     */\n    'cols': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Indicates whether the user can interact with the element.\n     */\n    'disabled': PropTypes.oneOfType([\n        PropTypes.oneOf(['disabled', 'DISABLED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates the form that is the owner of the element.\n     */\n    'form': PropTypes.string,\n\n    /**\n     * Provides a hint as to the type of data that might be entered by the user while editing the element or its contents. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\n     */\n    'inputMode': PropTypes.string,\n\n    /**\n     * Defines the maximum number of characters allowed in the element.\n     */\n    'maxLength': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Defines the minimum number of characters allowed in the element.\n     */\n    'minLength': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    'name': PropTypes.string,\n\n    /**\n     * Provides a hint to the user of what can be entered in the field.\n     */\n    'placeholder': PropTypes.string,\n\n    /**\n     * Indicates whether the element can be edited.\n     */\n    'readOnly': PropTypes.string,\n\n    /**\n     * Indicates whether this element is required to fill out or not.\n     */\n    'required': PropTypes.oneOfType([\n        PropTypes.oneOf(['required', 'REQUIRED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the number of rows in a text area.\n     */\n    'rows': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Indicates whether the text should be wrapped.\n     */\n    'wrap': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Textarea;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Tfoot is a wrapper for the <tfoot> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\n */\nconst Tfoot = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <tfoot\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </tfoot>\n    );\n};\n\n\nTfoot.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Tfoot;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Th is a wrapper for the <th> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\n */\nconst Th = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <th\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </th>\n    );\n};\n\n\nTh.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The colspan attribute defines the number of columns a cell should span.\n     */\n    'colSpan': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * IDs of the <th> elements which applies to this element.\n     */\n    'headers': PropTypes.string,\n\n    /**\n     * Defines the number of rows a table cell should span over.\n     */\n    'rowSpan': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Defines the cells that the header test (defined in the th element) relates to.\n     */\n    'scope': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Th;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Thead is a wrapper for the <thead> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\n */\nconst Thead = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <thead\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </thead>\n    );\n};\n\n\nThead.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Thead;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Time is a wrapper for the <time> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time\n */\nconst Time = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <time\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </time>\n    );\n};\n\n\nTime.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates the date and time associated with the element.\n     */\n    'dateTime': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Time;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Title is a wrapper for the <title> HTML5 element.\n *\n * CAUTION: <title> is included for completeness, but is not expected to\n * do anything outside of <head>. Dash components are always created in the\n * <body>.\n *\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\n */\nconst Title = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <title\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </title>\n    );\n};\n\n\nTitle.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Title;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Tr is a wrapper for the <tr> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr\n */\nconst Tr = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <tr\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </tr>\n    );\n};\n\n\nTr.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Tr;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Track is a wrapper for the <track> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\n */\nconst Track = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <track\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </track>\n    );\n};\n\n\nTrack.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Indicates that the track should be enabled unless the user's preferences indicate something different.\n     */\n    'default': PropTypes.oneOfType([\n        PropTypes.oneOf(['default', 'DEFAULT']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Specifies the kind of text track.\n     */\n    'kind': PropTypes.string,\n\n    /**\n     * Specifies a user-readable title of the element.\n     */\n    'label': PropTypes.string,\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     *\n     */\n    'srcLang': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Track;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * U is a wrapper for the <u> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u\n */\nconst U = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <u\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </u>\n    );\n};\n\n\nU.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default U;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Ul is a wrapper for the <ul> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\n */\nconst Ul = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <ul\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </ul>\n    );\n};\n\n\nUl.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Ul;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Var is a wrapper for the <var> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var\n */\nconst Var = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <var\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </var>\n    );\n};\n\n\nVar.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Var;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Video is a wrapper for the <video> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\n */\nconst Video = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <video\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </video>\n    );\n};\n\n\nVideo.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * The audio or video should play as soon as possible.\n     */\n    'autoPlay': PropTypes.oneOfType([\n        PropTypes.oneOf(['autoPlay', 'autoplay', 'AUTOPLAY']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether the browser should show playback controls to the user.\n     */\n    'controls': PropTypes.oneOfType([\n        PropTypes.oneOf(['controls', 'CONTROLS']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * How the element handles cross-origin requests\n     */\n    'crossOrigin': PropTypes.string,\n\n    /**\n     * Specifies the height of elements listed here. For all other elements, use the CSS height property. Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\n     */\n    'height': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Indicates whether the media should start playing from the start when it's finished.\n     */\n    'loop': PropTypes.oneOfType([\n        PropTypes.oneOf(['loop', 'LOOP']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Indicates whether the audio will be initially silenced on page load.\n     */\n    'muted': PropTypes.oneOfType([\n        PropTypes.oneOf(['muted', 'MUTED']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * A URL indicating a poster frame to show until the user plays or seeks.\n     */\n    'poster': PropTypes.string,\n\n    /**\n     * Indicates whether the whole resource, parts of it or nothing should be preloaded.\n     */\n    'preload': PropTypes.string,\n\n    /**\n     * The URL of the embeddable content.\n     */\n    'src': PropTypes.string,\n\n    /**\n     * For the elements listed here, this establishes the element's width. Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\n     */\n    'width': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Video;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Wbr is a wrapper for the <wbr> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr\n */\nconst Wbr = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <wbr\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </wbr>\n    );\n};\n\n\nWbr.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Wbr;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {omit} from 'ramda';\n\n\n/**\n * Xmp is a wrapper for the <xmp> HTML5 element.\n * For detailed attribute info see:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp\n */\nconst Xmp = ({n_clicks = 0, n_clicks_timestamp = -1, ...props}) => {\n    const extraProps = {};\n    if(props.loading_state && props.loading_state.is_loading) {\n        extraProps['data-dash-is-loading'] = true;\n    }\n\n     /* remove unnecessary onClick event listeners  */\n    const isStatic = props.disable_n_clicks || !props.id;\n    return (\n        <xmp\n            {...(!isStatic && {onClick:\n            () => props.setProps({\n                n_clicks: n_clicks + 1,\n                n_clicks_timestamp: Date.now()\n            })\n            })}\n            {...omit(['n_clicks', 'n_clicks_timestamp', 'loading_state', 'setProps', 'disable_n_clicks'], props)}\n            {...extraProps}\n        >\n            {props.children}\n        </xmp>\n    );\n};\n\n\nXmp.propTypes = {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    'id': PropTypes.string,\n\n    /**\n     * The children of this component\n     */\n    'children': PropTypes.node,\n\n    /**\n     * An integer that represents the number of times\n     * that this element has been clicked on.\n     */\n    'n_clicks': PropTypes.number,\n\n    /**\n     * An integer that represents the time (in ms since 1970)\n     * at which n_clicks changed. This can be used to tell\n     * which button was changed most recently.\n     */\n    'n_clicks_timestamp': PropTypes.number,\n\n    /**\n     * When True, this will disable the n_clicks prop.  Use this to remove\n     * event listeners that may interfere with screen readers.\n     */\n    'disable_n_clicks': PropTypes.bool,\n\n    /**\n     * A unique identifier for the component, used to improve\n     * performance by React.js while rendering components\n     * See https://reactjs.org/docs/lists-and-keys.html for more info\n     */\n    'key': PropTypes.string,\n\n    /**\n     * A wildcard data attribute\n     */\n    'data-*': PropTypes.string,\n\n    /**\n     * A wildcard aria attribute\n     */\n    'aria-*': PropTypes.string,\n\n    /**\n     * Keyboard shortcut to activate or add focus to the element.\n     */\n    'accessKey': PropTypes.string,\n\n    /**\n     * Often used with CSS to style elements with common properties.\n     */\n    'className': PropTypes.string,\n\n    /**\n     * Indicates whether the element's content is editable.\n     */\n    'contentEditable': PropTypes.string,\n\n    /**\n     * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n     */\n    'dir': PropTypes.string,\n\n    /**\n     * Defines whether the element can be dragged.\n     */\n    'draggable': PropTypes.string,\n\n    /**\n     * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n     */\n    'hidden': PropTypes.oneOfType([\n        PropTypes.oneOf(['hidden', 'HIDDEN']),\n        PropTypes.bool\n     ]),\n\n    /**\n     * Defines the language used in the element.\n     */\n    'lang': PropTypes.string,\n\n    /**\n     * Defines an explicit role for an element for use by assistive technologies.\n     */\n    'role': PropTypes.string,\n\n    /**\n     * Indicates whether spell checking is allowed for the element.\n     */\n    'spellCheck': PropTypes.string,\n\n    /**\n     * Defines CSS styles which will override styles previously set.\n     */\n    'style': PropTypes.object,\n\n    /**\n     * Overrides the browser's default tab order and follows the one specified instead.\n     */\n    'tabIndex': PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n     ]),\n\n    /**\n     * Text to be displayed in a tooltip when hovering over the element.\n     */\n    'title': PropTypes.string,\n\n    /**\n     * Object that holds the loading state object coming from dash-renderer\n     */\n    'loading_state': PropTypes.shape({\n        /**\n         * Determines if the component is loading or not\n         */\n        is_loading: PropTypes.bool,\n        /**\n         * Holds which property is loading\n         */\n        prop_name: PropTypes.string,\n        /**\n         * Holds the name of the component that is loading\n         */\n        component_name: PropTypes.string,\n    }),\n\n    /**\n     * Dash-assigned callback that gets fired when the element is clicked.\n     */\n    'setProps': PropTypes.func\n};\n\nexport default Xmp;\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","_isPlaceholder","_curry1","fn","f1","arguments","length","apply","this","_curry2","f2","b","_b","_a","names","result","index","idx","len","A","_ref","_ref$n_clicks","n_clicks","props","n_clicks_timestamp","_objectWithoutProperties","_excluded","extraProps","loading_state","is_loading","cleanUrl","dash_clientside","clean_url","href","React","setProps","_dash_error","Error","concat","isStatic","disable_n_clicks","id","_extends","onClick","Date","now","omit","children","propTypes","PropTypes","prop_name","component_name","Abbr","Acronym","Address","Area","Article","Aside","Audio","B","Base","Basefont","Bdi","Bdo","Big","Blink","Blockquote","Br","Button","formAction","Canvas","Caption","Center","Cite","Code","Col","Colgroup","Content","Data","Datalist","Dd","Del","Details","Dfn","Dialog","Div","Dl","Dt","Em","Embed","src","Fieldset","Figcaption","Figure","Font","Footer","Form","action","Frame","Frameset","H1","H2","H3","H4","H5","H6","Header","Hgroup","Hr","I","Iframe","Img","Ins","Kbd","Keygen","Label","Legend","Li","Link","Main","MapEl","Mark","Marquee","Meta","Meter","Nav","Nobr","Noscript","ObjectEl","data","Ol","Optgroup","Option","Output","P","Param","Picture","Plaintext","Pre","Progress","Q","Rb","Rp","Rt","Rtc","Ruby","S","Samp","Script","Section","Select","Shadow","Slot","Small","Source","Spacer","Span","Strike","Strong","Sub","Summary","Sup","Table","Tbody","Td","Template","Textarea","Tfoot","Th","Thead","Time","Title","Tr","Track","U","Ul","Var","Video","Wbr","Xmp"],"sourceRoot":""}
