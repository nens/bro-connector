# Generated by Django 4.0.3 on 2022-04-01 12:59

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='aanleverinfo_filters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meetpunt', models.CharField(blank=True, max_length=254, null=True)),
                ('filter_id', models.CharField(blank=True, max_length=254, null=True)),
                ('aanleveren', models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'Aanleverinfo filters',
                'verbose_name_plural': 'Aanleverinfo filters',
                'db_table': 'aanlevering"."aanleverinfo_filters',
            },
        ),
        migrations.CreateModel(
            name='DeliveredLocations',
            fields=[
                ('location_id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_object_id', models.IntegerField(blank=True, null=True)),
                ('coordinates', models.TextField(blank=True, null=True)),
                ('referencesystem', models.TextField(blank=True, null=True)),
                ('horizontal_positioning_method', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gmw"."delivered_locations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DeliveredVerticalPositions',
            fields=[
                ('delivered_vertical_positions_id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_object_id', models.IntegerField(blank=True, null=True)),
                ('local_vertical_reference_point', models.TextField(blank=True, null=True)),
                ('offset', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('vertical_datum', models.TextField(blank=True, null=True)),
                ('ground_level_position', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('ground_level_positioning_method', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gmw"."delivered_vertical_positions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='gld_addition_log_controle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.CharField(blank=True, max_length=254, null=True)),
                ('location', models.CharField(blank=True, max_length=254, null=True)),
                ('start', models.CharField(blank=True, max_length=254, null=True)),
                ('end', models.CharField(blank=True, max_length=254, null=True)),
                ('broid_registration', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_uuid', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_initialized', models.CharField(blank=True, max_length=254, null=True)),
                ('validation_status', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_id', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_status', models.CharField(blank=True, max_length=254, null=True)),
                ('comments', models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'GLD addition register controlemetingen',
                'verbose_name_plural': 'GLD addition register controlemetingen',
                'db_table': 'aanlevering"."gld_addition_log_controle',
            },
        ),
        migrations.CreateModel(
            name='gld_addition_log_volledig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.CharField(blank=True, max_length=254, null=True)),
                ('location', models.CharField(blank=True, max_length=254, null=True)),
                ('start', models.CharField(blank=True, max_length=254, null=True)),
                ('end', models.CharField(blank=True, max_length=254, null=True)),
                ('broid_registration', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_uuid', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_initialized', models.CharField(blank=True, max_length=254, null=True)),
                ('validation_status', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_id', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_status', models.CharField(blank=True, max_length=254, null=True)),
                ('comments', models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'GLD addition register volledig beoordeelde metingen',
                'verbose_name_plural': 'GLD addition register volledig beoordeelde metingen',
                'db_table': 'aanlevering"."gld_addition_log_volledig',
            },
        ),
        migrations.CreateModel(
            name='gld_addition_log_voorlopig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.CharField(blank=True, max_length=254, null=True)),
                ('location', models.CharField(blank=True, max_length=254, null=True)),
                ('start', models.CharField(blank=True, max_length=254, null=True)),
                ('end', models.CharField(blank=True, max_length=254, null=True)),
                ('broid_registration', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_uuid', models.CharField(blank=True, max_length=254, null=True)),
                ('procedure_initialized', models.CharField(blank=True, max_length=254, null=True)),
                ('validation_status', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_id', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_status', models.CharField(blank=True, max_length=254, null=True)),
                ('comments', models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'GLD addition register voorlopige metingen',
                'verbose_name_plural': 'GLD addition register voorlopige metingen',
                'db_table': 'aanlevering"."gld_addition_log_voorlopig',
            },
        ),
        migrations.CreateModel(
            name='gld_registration_log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.CharField(blank=True, max_length=254, null=True)),
                ('gwm_bro_id', models.CharField(blank=True, max_length=254, null=True)),
                ('filter_id', models.CharField(blank=True, max_length=254, null=True)),
                ('validation_status', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_id', models.CharField(blank=True, max_length=254, null=True)),
                ('levering_status', models.CharField(blank=True, max_length=254, null=True)),
                ('gld_bro_id', models.CharField(blank=True, max_length=254, null=True)),
                ('comments', models.CharField(blank=True, max_length=254, null=True)),
                ('last_changed', models.CharField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'GLD registration register',
                'verbose_name_plural': 'GLD registration register',
                'db_table': 'aanlevering"."gld_registration_log',
            },
        ),
        migrations.CreateModel(
            name='GroundwaterLevelDossier',
            fields=[
                ('groundwater_level_dossier_id', models.AutoField(primary_key=True, serialize=False)),
                ('groundwater_monitoring_tube_id', models.IntegerField(blank=True, null=True)),
                ('gmw_bro_id', models.CharField(blank=True, max_length=255, null=True)),
                ('gld_bro_id', models.CharField(blank=True, max_length=255, null=True)),
                ('research_start_date', models.DateField(blank=True, null=True)),
                ('research_last_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Groundwaterlevel dossier',
                'verbose_name_plural': 'Groundwater level dossier',
                'db_table': 'gld"."groundwater_level_dossier',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroundwaterMonitoringTubes',
            fields=[
                ('groundwater_monitoring_tube_id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_object_id', models.IntegerField(blank=True, null=True)),
                ('tube_number', models.IntegerField(blank=True, null=True)),
                ('tube_type', models.TextField(blank=True, null=True)),
                ('artesian_well_cap_present', models.TextField(blank=True, null=True)),
                ('sediment_sump_present', models.TextField(blank=True, null=True)),
                ('number_of_geo_ohm_cables', models.IntegerField(blank=True, null=True)),
                ('tube_top_diameter', models.IntegerField(blank=True, null=True)),
                ('variable_diameter', models.TextField(blank=True, null=True)),
                ('tube_status', models.TextField(blank=True, null=True)),
                ('tube_top_position', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('tube_top_positioning_method', models.TextField(blank=True, null=True)),
                ('tube_packing_material', models.TextField(blank=True, null=True)),
                ('tube_material', models.TextField(blank=True, null=True)),
                ('glue', models.TextField(blank=True, null=True)),
                ('screen_length', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('sock_material', models.TextField(blank=True, null=True)),
                ('plain_tube_part_length', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('sediment_sump_length', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
            ],
            options={
                'db_table': 'gmw"."groundwater_monitoring_tubes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroundwaterMonitoringWells',
            fields=[
                ('registration_object_id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_object_type', models.TextField(blank=True, null=True)),
                ('bro_id', models.CharField(blank=True, max_length=15, null=True)),
                ('request_reference', models.CharField(blank=True, max_length=255, null=True)),
                ('delivery_accountable_party', models.IntegerField(blank=True, null=True)),
                ('delivery_responsible_party', models.IntegerField(blank=True, null=True)),
                ('quality_regime', models.TextField(blank=True, null=True)),
                ('under_privilege', models.TextField(blank=True, null=True)),
                ('delivery_context', models.TextField(blank=True, null=True)),
                ('construction_standard', models.TextField(blank=True, null=True)),
                ('initial_function', models.TextField(blank=True, null=True)),
                ('number_of_standpipes', models.IntegerField(blank=True, null=True)),
                ('ground_level_stable', models.TextField(blank=True, null=True)),
                ('well_stability', models.TextField(blank=True, null=True)),
                ('nitg_code', models.CharField(blank=True, max_length=256, null=True)),
                ('olga_code', models.CharField(blank=True, max_length=256, null=True)),
                ('well_code', models.CharField(blank=True, max_length=256, null=True)),
                ('owner', models.IntegerField(blank=True, null=True)),
                ('maintenance_responsible_party', models.IntegerField(blank=True, null=True)),
                ('well_head_protector', models.TextField(blank=True, null=True)),
                ('well_construction_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gmw"."groundwater_monitoring_wells',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementPointMetadata',
            fields=[
                ('measurement_point_metadata_id', models.AutoField(primary_key=True, serialize=False)),
                ('qualifier_by_category', models.IntegerField(blank=True, null=True)),
                ('censored_reason', models.IntegerField(blank=True, null=True)),
                ('qualifier_by_quantity', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
                ('interpolation_code', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Measurement point metadata',
                'verbose_name_plural': 'Measurement point metadata',
                'db_table': 'gld"."measurement_point_metadata',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementTimeSeries',
            fields=[
                ('measurement_time_series_id', models.AutoField(primary_key=True, serialize=False)),
                ('gmw_bro_id', models.CharField(blank=True, max_length=255, null=True)),
                ('filter_nr', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Measurement timeseries',
                'verbose_name_plural': 'Measurement timeseries',
                'db_table': 'gld"."measurement_time_series',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementTimeseriesTvpObservation',
            fields=[
                ('measurement_timeseries_tvp_observation_id', models.AutoField(primary_key=True, serialize=False)),
                ('groundwater_level_dossier_id', models.IntegerField(blank=True, null=True)),
                ('observation_starttime', models.DateTimeField(blank=True, null=True)),
                ('observation_endtime', models.DateTimeField(blank=True, null=True)),
                ('result_time', models.DateTimeField(blank=True, null=True)),
                ('metadata_observation_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Measurement timeseries tvp observation',
                'verbose_name_plural': 'Measurement timeseries tvp observation',
                'db_table': 'gld"."measurement_timeseries_tvp_observation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementTvp',
            fields=[
                ('measurement_tvp_id', models.AutoField(primary_key=True, serialize=False)),
                ('measurement_time_series_id', models.IntegerField(blank=True, null=True)),
                ('measurement_time', models.DateTimeField(blank=True, null=True)),
                ('field_value', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
                ('calculated_value', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
                ('corrected_value', models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True)),
                ('correction_time', models.DateTimeField(blank=True, null=True)),
                ('correction_reason', models.CharField(blank=True, max_length=255, null=True)),
                ('measurement_metadata_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Measurement tvp',
                'verbose_name_plural': 'Measurement tvp',
                'db_table': 'gld"."measurement_tvp',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('observation_id', models.AutoField(primary_key=True, serialize=False)),
                ('observationperiod', models.DurationField(blank=True, null=True)),
                ('observation_starttime', models.DateTimeField(blank=True, null=True)),
                ('observation_endtime', models.DateTimeField(blank=True, null=True)),
                ('observation_metadata_id', models.IntegerField(blank=True, null=True)),
                ('observation_process_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Observation',
                'verbose_name_plural': 'Observation',
                'db_table': 'gld"."observation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ObservationMetadata',
            fields=[
                ('observation_metadata_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_stamp', models.DateField(blank=True, null=True)),
                ('parameter_measurement_serie_type', models.IntegerField(blank=True, null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
                ('responsible_party_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Observation metadata',
                'verbose_name_plural': 'Observation metadata',
                'db_table': 'gld"."observation_metadata',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ObservationProcess',
            fields=[
                ('observation_process_id', models.AutoField(primary_key=True, serialize=False)),
                ('process_reference', models.IntegerField(blank=True, null=True)),
                ('parameter_measurement_instrument_type', models.IntegerField(blank=True, null=True)),
                ('parameter_air_pressure_compensation_type', models.IntegerField(blank=True, null=True)),
                ('process_type', models.IntegerField(blank=True, null=True)),
                ('parameter_evaluation_procedure', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Observation process',
                'verbose_name_plural': 'Observation process',
                'db_table': 'gld"."observation_process',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResponsibleParty',
            fields=[
                ('responsible_party_id', models.AutoField(primary_key=True, serialize=False)),
                ('identification', models.IntegerField(blank=True, null=True)),
                ('organisation_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Responsible party',
                'verbose_name_plural': 'Responsible party',
                'db_table': 'gld"."responsible_party',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeAirPressureCompensation',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_air_pressure_compensation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeCensoredReasonCode',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_censored_reason_code',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeEvaluationProcedure',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_evaluation_procedure',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeInterpolationCode',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_interpolation_code',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeMeasementInstrumentType',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_measement_instrument_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeObservationType',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_observation_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeProcessReference',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_process_reference',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeProcessType',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_process_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeStatusCode',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_status_code',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeStatusQualityControl',
            fields=[
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
                ('definition_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('imbro', models.BooleanField(blank=True, null=True)),
                ('imbro_a', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gld"."type_status_quality_control',
                'managed': True,
            },
        ),
    ]
